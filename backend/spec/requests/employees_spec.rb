require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/employees', type: :request do
  let(:admin_credentials) { { id: 99_999, username: 'admin', password: 'password', password_confirmation: 'password' } }
  let(:valid_attributes) { { username: Faker::Name.name, password: 'password', password_confirmation: 'password' } }

  let(:invalid_attributes) { { id: 123, password: '11', password_confirmation: '22' } }
  let(:valid_headers) { {} }

  before do
    FactoryBot.create(:employee, admin_credentials)
    post api_v1_login_url, params: admin_credentials
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      FactoryBot.create(:employee)
      get api_v1_employees_url, headers: valid_headers, as: :json
      expect(response).to be_successful
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      employee = FactoryBot.create(:employee)
      get api_v1_employee_url(employee), as: :json
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new Employee' do
        expect do
          post api_v1_employees_url,
               params: { employee: valid_attributes }, headers: valid_headers, as: :json
        end.to change(Employee, :count).by(1)
      end

      it 'renders a JSON response with the new employee' do
        post api_v1_employees_url,
             params: { employee: valid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:created)
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new Employee' do
        expect do
          post api_v1_employees_url,
               params: { employee: invalid_attributes }, as: :json
        end.not_to change(Employee, :count)
      end

      it 'renders a JSON response with errors for the new employee' do
        post api_v1_employees_url,
             params: { employee: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe 'POST /employees/bulk_upsert' do
    context 'with bulk file' do
      let(:file_path) { Rails.root.join('spec/fixtures/files/times.csv') }
      let(:uploaded_file) { Rack::Test::UploadedFile.new(file_path, 'text/csv') }

      it 'creates a bunch of new Employees' do
        expect do
          post bulk_upsert_api_v1_employees_url, params: { file: uploaded_file }
        end.to change(Employee, :count).by(35)
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) do
        { name: Faker::Name.name }
      end

      it 'updates the requested employee' do
        employee = Employee.create! valid_attributes
        patch api_v1_employee_url(employee),
              params: { employee: new_attributes }, headers: valid_headers, as: :json
        employee.reload
        expect(employee.name).to match(new_attributes[:name])
      end

      it 'renders a JSON response with the employee' do # rubocop:disable RSpec/MultipleExpectations
        employee = Employee.create! valid_attributes
        patch api_v1_employee_url(employee),
              params: { employee: new_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:ok)
        expect(response.content_type).to match(a_string_including('application/json'))
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested employee' do
      employee = Employee.create! valid_attributes
      expect do
        delete api_v1_employee_url(employee), headers: valid_headers, as: :json
      end.to change(Employee, :count).by(-1)
    end
  end
end
